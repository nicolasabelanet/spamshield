name: main

on:
  push:
    # branches:
    #   - "**"
    tags:
      - "v*.*.*"

jobs:
  prepare:
    runs-on: ubuntu-latest
    outputs:
      safe_version: ${{ steps.compute.outputs.safe_version }}
    steps:
      - name: Compute safe version
        id: compute
        run: |
          SAFE_VERSION=$(echo "${GITHUB_REF_NAME}" | tr '/' '-')
          echo "safe_version=${SAFE_VERSION}" >> $GITHUB_OUTPUT

  test:
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v5

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version-file: ".python-version"

      - name: Install uv
        uses: astral-sh/setup-uv@v6
        with:
          enable-cache: true

      - name: Install project deps
        run: uv sync --locked --dev

      - name: Ruff check
        run: |
          uv run ruff check --output-format=github .

      - name: Run pytest
        run: |
          uv run pytest

  create-dataset:
    runs-on: ubuntu-latest
    needs: [prepare, test]
    if: startsWith(github.ref, 'refs/tags/')
    env:
      DATASET: "dataset/spamshield-data.csv"

    steps:
      - name: Check out code
        uses: actions/checkout@v5

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version-file: ".python-version"

      - name: Install uv
        uses: astral-sh/setup-uv@v6
        with:
          enable-cache: true

      - name: Install project deps
        run: uv sync --locked --all-extras 

      - name: Create dataset
        run: |
          uv run create-spam-dataset --output "$DATASET"
        env:
          KAGGLE_USERNAME: ${{ secrets.KAGGLE_USERNAME }}
          KAGGLE_KEY: ${{ secrets.KAGGLE_KEY }}

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: dataset_artifact
          path: dataset
          retention-days: 7

  train:
    runs-on: ubuntu-latest
    needs: [prepare, test, create-dataset]
    if: startsWith(github.ref, 'refs/tags/')
    env:
      DATASET: "dataset/spamshield-data.csv"

    steps:
      - name: Check out code
        uses: actions/checkout@v5

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version-file: ".python-version"

      - name: Install uv
        uses: astral-sh/setup-uv@v6
        with:
          enable-cache: true

      - name: Install project deps
        run: uv sync --locked --all-extras 

      - name: Download dataset artifacts from dataset job
        uses: actions/download-artifact@v4
        with:
          name: dataset_artifact
          path: dataset

      - name: Train model
        run: |
          uv run train-spam-model --version "${{ needs.prepare.outputs.safe_version }}" --dataset "$DATASET"

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: model_artifacts
          path: models/${{ needs.prepare.outputs.safe_version }}
          retention-days: 30

  docker:
    runs-on: ubuntu-latest
    needs: [prepare, train]
    if: startsWith(github.ref, 'refs/tags/') 
    permissions:
      id-token: write
      packages: write

    env:
      ECR: 463756797111.dkr.ecr.us-west-1.amazonaws.com

    steps:
      - name: Check out code
        uses: actions/checkout@v5

      - name: Download model artifacts from train job
        uses: actions/download-artifact@v4
        with:
          name: model_artifacts
          path: models/${{ needs.prepare.outputs.safe_version }}

      - name: Configure AWS credentials via OIDC
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::463756797111:role/GitHubActionsECRPushRole
          aws-region: us-west-1

      - name: Log in to Amazon ECR
        run: |
          aws ecr get-login-password --region us-west-1 \
            | docker login \
                --username AWS \
                --password-stdin "$ECR"

      - name: Build Docker image
        run: |
          docker build \
            --build-arg SPAMSHIELD_MODEL_VERSION="${{ needs.prepare.outputs.safe_version }}" \
            -t "$ECR/spamshield:${{ needs.prepare.outputs.safe_version }}" \
            -t "$ECR/spamshield:latest" \
            .

      - name: Push Docker image
        run: |
          docker push "$ECR/spamshield:${{ needs.prepare.outputs.safe_version }}"
          docker push "$ECR/spamshield:latest"
