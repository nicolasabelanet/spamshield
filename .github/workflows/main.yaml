name: main

on:
  push:
    branches:
      - "**"
    tags:
      - "v*.*.*"

jobs:
  prepare:
    runs-on: ubuntu-latest
    outputs:
      safe_version: ${{ steps.compute.outputs.safe_version }}
    steps:
      - name: Compute safe version
        id: compute
        run: |
          SAFE_VERSION=$(echo "${GITHUB_REF_NAME}" | tr '/' '-')
          echo "safe_version=${SAFE_VERSION}" >> $GITHUB_OUTPUT

  test:
    runs-on: ubuntu-latest

    steps:
      - name: Check out code
        uses: actions/checkout@v5

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version-file: ".python-version"

      - name: Install uv
        uses: astral-sh/setup-uv@v6
        with:
          enable-cache: true

      - name: Install project deps
        run: uv sync --locked --dev

      - name: Ruff check
        run: |
          uv run ruff check --output-format=github .

      - name: Run pytest
        run: |
          uv run pytest

  train:
    runs-on: ubuntu-latest
    needs: [prepare, test]
    permissions:
      contents: read
    env:
      DATASET_DIR: dataset
      DATASET_VERSION: v1.0.0
      DATASET: spam.csv

    steps:
      - name: Check out code
        uses: actions/checkout@v5

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version-file: ".python-version"

      - name: Install uv
        uses: astral-sh/setup-uv@v6
        with:
          enable-cache: true

      - name: Install project deps
        run: uv sync --locked --all-extras 

      - name: Download dataset from release
        env:
            GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          mkdir -p "$DATASET_DIR"

          gh release download "$DATA_VERSION" \
            --repo ${{ github.repository }} \
            --pattern "spamshield-dataset-${DATA_VERSION}.zip" \
            --output dataset.zip

          unzip dataset.zip -d "$DATASET_DIR"
          DATASET_FILE=$(find "$DATASET_DIR" -type f -name "*.csv" | head -n 1)
          echo "âœ… Found dataset file: $DATASET_FILE"
          echo "dataset_path=$DATASET_FILE" >> "$GITHUB_OUTPUT"

      - name: Train model
        run: |
          uv run train-spam-model --version ${{ needs.prepare.outputs.safe_version }} --dataset ${{ steps.dataset.outputs.dataset_path }}
        env:
          KAGGLE_USERNAME: ${{ secrets.KAGGLE_USERNAME }}
          KAGGLE_KEY: ${{ secrets.KAGGLE_KEY }}

      - name: Upload artifacts
        if: startsWith(github.ref, 'refs/tags/')
        uses: actions/upload-artifact@v4
        with:
          name: model_artifacts
          path: models/${{ needs.prepare.outputs.safe_version }}

  build:
    runs-on: ubuntu-latest
    needs: [prepare, train]
    if: startsWith(github.ref, 'refs/tags/') # whole job runs only on tag pushes
    permissions:
      packages: write

    steps:
      - name: Check out code
        uses: actions/checkout@v4

      - name: Download model artifacts from train job
        uses: actions/download-artifact@v4
        with:
          name: model_artifacts
          path: models/${{ needs.prepare.outputs.safe_version }}

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build Docker image
        run: |
          docker build \
            --build-arg SPAMSHIELD_MODEL_VERSION=${{ needs.prepare.outputs.safe_version }} \
            -t ghcr.io/${{ github.repository_owner }}/${{ github.event.repository.name }}:${{ needs.prepare.outputs.safe_version }} \
            -t ghcr.io/${{ github.repository_owner }}/${{ github.event.repository.name }}:latest \
            .

      - name: Push Docker image
        run: |
          docker push ghcr.io/${{ github.repository_owner }}/${{ github.event.repository.name }}:${{ needs.prepare.outputs.safe_version }}
          docker push ghcr.io/${{ github.repository_owner }}/${{ github.event.repository.name }}:latest
